numpy operations

-> importing numpy as np
-> creating one-D array [np.array([1,2,3])]
-> creating two-D array [np.array([1,2,3],[1,2,3])]
-> np.add(),np.subtract() , np.divide() , np.multiply() , np.divide() , np.dot() , np.exp() , np.log() , np.log10();
-> slicing one-D array [arr[1:3] , arr[-1,-2]]
-> modification of one-D array
-> n - dimensional array by using random function [arr = np.random.rand(2,3)]
-> np.zeros((1,2),dtype ="int")
-> np.ones((2,3),dtype = "int")
-> np.full((2,3),6)

-----------------------------------------------------------------------------------------

pandas Series

import pandas as pd
-> pd.Series([1,2,3]) 
-> Creating a Data Frame
	import pandas as pd
	import numpy as np
	
	# Generate random hours (0 to 23), minutes (0 to 59), and seconds (0 to 59)
	hours = np.random.randint(0, 24, 5)
	minutes = np.random.randint(0, 60, 5)
	seconds = np.random.randint(0, 60, 5)
	
	# Format them into HH:MM:SS format
	time_of_entry = [str(h) + ":" + str(m) + ":" + str(s) for h, m, s in zip(hours, minutes, seconds)]
	
	# Create the DataFrame with 5 entries
	series = pd.DataFrame({
	    'S.No': range(1, 6),  # Adjusted to create 5 entries
	    'Time Of Entry': time_of_entry,
	    'Names': ["a", "b", "c", "d", "e"],  # List of 5 names
	    'Status': 'present'  # All values in 'Status' are 'present'
	})
	
	print(series)
-> DataFrame From Dict
	dict =['A' : {1,2,3},'B' : {1,2,3} , 'C':{1,2,3}]
	df = pd.DataFrame(dict)
-> DataFrame From external Data
	cols = ['name','age','status']
	df = pd.read_csv("sample.csv" , names = cols)
	print(df)
	
	create sample.csv File  give data below
	"ashwin",12,"present"
	"pradeep",25,"not present"

-----------------------------------------------------------------------------------------

Handling of Data

-> import pandas as pd
-> creating DataFrame [normal , from Dict , from external Source(csv)]
-> Reading Data [csv , external , url]
-> Inspecting DataFrame [df.info() , df.shape]
-> df[0].mean() , df[1].median() , df[0].mode() , df[0].skew() , df[0].std() , df[0].kurtosis , df.var()


Handling missing Data

data = ['A' : {1,2,np.nan} , 'B' : {1,np.nan,2} , 'C' : {np.nan,1,2}]
df = pd.DataFrame(data)
print(df.isnull()) -> return if the values are null orr not 
print(df.isnull().sum()) - > returns the no . of null values
print(df.fillna(0)) -> fills the nan values with 0

To Find Correlation

df = pd.DataFrame({
    'X': [1, 2, 3, 4, 5],
    'Y': [5, 4, 3, 2, 1]
})

pearson_corr = df['X'].corr(df['Y'])

-----------------------------------------------------------------------------------------

Linear Regression

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

# Sample data
X = np.array([1, 2, 3, 4, 5]).reshape(-1, 1)  # Independent variable (reshape for 1D array)
y = np.array([1, 2, 1.5, 3.5, 2.5])  # Dependent variable (target)

# Create and fit the model
model = LinearRegression()
model.fit(X, y)



# Predict values
y_pred = model.predict(X)

# Plot the data and the regression line
plt.scatter(X, y, color='blue')  # Actual data points
plt.plot(X, y_pred, color='red')  # Regression line
plt.xlabel('X')
plt.ylabel('y')
plt.title('Simple Linear Regression')
plt.show()

-----------------------------------------------------------------------------------------

Bargraph

import matplotlib.pyplot as plt
categories = ['Category A', 'Category B', 'Category C', 'Category D']
values = [23, 45, 12, 36]
plt.bar(categories, values)
plt.xlabel('Categories')
plt.ylabel('Values')
plt.title('Bar Graph Example')

-----------------------------------------------------------------------------------------

Histogram

import matplotlib.pyplot as plt
data = [12, 15, 16, 16, 18, 19, 21, 22, 22, 23, 24, 25, 25, 25, 26, 27, 28, 30, 35]
plt.hist(data, bins=5,edgecolor = "black")
plt.title('Histogram Example')
plt.xlabel('Value Range')
plt.ylabel('Frequency')
plt.show()

-----------------------------------------------------------------------------------------

Lineplot

import matplotlib.pyplot as plt
x = [1, 2, 3, 4, 5]
y = [2, 3, 5, 7, 11]
plt.plot(x, y)
plt.title('Line Plot Example')
plt.xlabel('X-axis Label')
plt.ylabel('Y-axis Label')
plt.show()

-----------------------------------------------------------------------------------------

Scatterplot

import matplotlib.pyplot as plt
x = [5, 7, 8, 7, 2, 17, 2, 9, 4, 11]
y = [99, 86, 87, 88, 100, 86, 103, 87, 94, 78]
plt.scatter(x, y)
plt.title('Scatter Plot Example')
plt.xlabel('X-axis Label')
plt.ylabel('Y-axis Label')
plt.show()
